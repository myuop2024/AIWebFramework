<%- include('layout', { 
  title: 'Admin Settings - Didit.me Integration', 
  isAuthenticated: isAuthenticated, 
  isAdmin: isAdmin, 
  body: `
    <div class="row justify-content-center mt-5">
      <div class="col-md-10">
        <div class="card shadow">
          <div class="card-body p-4">
            <h1 class="card-title mb-4">Admin Settings</h1>
            
            <div id="admin-login-form" class="${isAdmin ? 'd-none' : ''}">
              <p class="lead mb-4">Please log in as an administrator to access settings</p>
              
              <form id="admin-auth-form" class="needs-validation" novalidate>
                <div class="mb-3">
                  <label for="admin-username" class="form-label">Admin Username</label>
                  <input type="text" class="form-control" id="admin-username" required>
                  <div class="invalid-feedback">Please provide a username.</div>
                </div>
                
                <div class="mb-3">
                  <label for="admin-password" class="form-label">Admin Password</label>
                  <input type="password" class="form-control" id="admin-password" required>
                  <div class="invalid-feedback">Please provide a password.</div>
                </div>
                
                <div class="d-grid gap-2">
                  <button type="submit" class="btn btn-primary">Login</button>
                </div>
              </form>
            </div>
            
            <div id="didit-settings" class="${isAdmin ? '' : 'd-none'}">
              <div id="settings-alert" class="alert d-none mb-4"></div>
              
              <ul class="nav nav-tabs mb-4" id="settingsTabs" role="tablist">
                <li class="nav-item" role="presentation">
                  <button class="nav-link active" id="didit-tab" data-bs-toggle="tab" data-bs-target="#didit" type="button" role="tab" aria-controls="didit" aria-selected="true">Didit.me Settings</button>
                </li>
                <li class="nav-item" role="presentation">
                  <button class="nav-link" id="users-tab" data-bs-toggle="tab" data-bs-target="#users" type="button" role="tab" aria-controls="users" aria-selected="false">User Management</button>
                </li>
              </ul>
              
              <div class="tab-content" id="settingsTabContent">
                <!-- Didit.me Settings Tab -->
                <div class="tab-pane fade show active" id="didit" role="tabpanel" aria-labelledby="didit-tab">
                  <div id="didit-settings-form-container">
                    <h3 class="mb-3">Didit.me Integration Settings</h3>
                    <p class="text-muted mb-4">Configure your Didit.me OAuth2 credentials to enable identity verification.</p>
                    
                    <div id="config-status" class="mb-4"></div>
                    
                    <form id="didit-settings-form" class="needs-validation" novalidate>
                      <div class="mb-3">
                        <label for="clientId" class="form-label">Client ID <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="clientId" required>
                        <div class="form-text">The client ID provided by Didit.me.</div>
                      </div>
                      
                      <div class="mb-3">
                        <label for="clientSecret" class="form-label">Client Secret <span class="text-danger">*</span></label>
                        <input type="password" class="form-control" id="clientSecret" required>
                        <div class="form-text">The client secret provided by Didit.me. Keep this secure!</div>
                      </div>
                      
                      <div class="mb-3">
                        <label for="redirectUri" class="form-label">Redirect URI</label>
                        <input type="text" class="form-control" id="redirectUri">
                        <div class="form-text">The callback URL registered with Didit.me. Default: http://localhost:3000/verification-callback</div>
                      </div>
                      
                      <div class="mb-3">
                        <label for="authUrl" class="form-label">Authorization URL</label>
                        <input type="text" class="form-control" id="authUrl">
                        <div class="form-text">The Didit.me authorization endpoint. Default: https://auth.didit.me/oauth/authorize</div>
                      </div>
                      
                      <div class="mb-3">
                        <label for="tokenUrl" class="form-label">Token URL</label>
                        <input type="text" class="form-control" id="tokenUrl">
                        <div class="form-text">The Didit.me token endpoint. Default: https://auth.didit.me/oauth/token</div>
                      </div>
                      
                      <div class="mb-3">
                        <label for="meUrl" class="form-label">User Info URL</label>
                        <input type="text" class="form-control" id="meUrl">
                        <div class="form-text">The Didit.me user info endpoint. Default: https://api.didit.me/v1/me</div>
                      </div>
                      
                      <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-4">
                        <button type="button" class="btn btn-outline-secondary me-md-2" id="reset-settings-btn">Reset to Defaults</button>
                        <button type="submit" class="btn btn-primary">Save Settings</button>
                      </div>
                    </form>
                  </div>
                </div>
                
                <!-- Users Tab -->
                <div class="tab-pane fade" id="users" role="tabpanel" aria-labelledby="users-tab">
                  <h3 class="mb-3">User Management</h3>
                  <p class="text-muted mb-4">View and manage users who have registered for identity verification.</p>
                  
                  <div class="table-responsive">
                    <table class="table table-striped">
                      <thead>
                        <tr>
                          <th>Email</th>
                          <th>Name</th>
                          <th>Verification Status</th>
                          <th>Verified On</th>
                          <th>Actions</th>
                        </tr>
                      </thead>
                      <tbody id="users-table-body">
                        <tr>
                          <td colspan="5" class="text-center">Loading users...</td>
                        </tr>
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  `,
  scripts: `
    <script>
      // Admin login functionality
      document.getElementById('admin-auth-form')?.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const username = document.getElementById('admin-username').value;
        const password = document.getElementById('admin-password').value;
        
        if (!username || !password) {
          alert('Username and password are required');
          return;
        }
        
        try {
          const response = await fetch('/api/admin/login', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ username, password }),
            credentials: 'same-origin'
          });
          
          if (response.ok) {
            window.location.reload();
          } else {
            const data = await response.json();
            alert('Error: ' + (data.error || 'Invalid admin credentials'));
          }
        } catch (error) {
          console.error('Admin login error:', error);
          alert('An error occurred. Please try again.');
        }
      });
      
      // Get Didit.me settings
      async function getDiditSettings() {
        try {
          const response = await fetch('/admin/settings/didit', {
            credentials: 'same-origin'
          });
          
          if (response.ok) {
            const data = await response.json();
            
            // Populate form fields
            document.getElementById('clientId').value = data.settings.clientId || '';
            document.getElementById('clientSecret').value = data.settings.clientSecret || '';
            document.getElementById('redirectUri').value = data.settings.redirectUri || '';
            document.getElementById('authUrl').value = data.settings.authUrl || '';
            document.getElementById('tokenUrl').value = data.settings.tokenUrl || '';
            document.getElementById('meUrl').value = data.settings.meUrl || '';
            
            // Show configuration status
            const configStatus = document.getElementById('config-status');
            if (data.isValid) {
              configStatus.innerHTML = '<div class="alert alert-success">✅ Configuration is valid and complete.</div>';
            } else {
              configStatus.innerHTML = '<div class="alert alert-warning">⚠️ Configuration is incomplete. Please provide all required fields.</div>';
            }
          } else {
            const data = await response.json();
            showAlert('danger', 'Error: ' + (data.error || 'Failed to get settings'));
          }
        } catch (error) {
          console.error('Settings fetch error:', error);
          showAlert('danger', 'An error occurred while fetching settings.');
        }
      }
      
      // Save Didit.me settings
      document.getElementById('didit-settings-form')?.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const settings = {
          clientId: document.getElementById('clientId').value,
          clientSecret: document.getElementById('clientSecret').value,
          redirectUri: document.getElementById('redirectUri').value,
          authUrl: document.getElementById('authUrl').value,
          tokenUrl: document.getElementById('tokenUrl').value,
          meUrl: document.getElementById('meUrl').value
        };
        
        try {
          const response = await fetch('/admin/settings/didit', {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(settings),
            credentials: 'same-origin'
          });
          
          const data = await response.json();
          
          if (response.ok) {
            showAlert('success', 'Settings saved successfully');
            
            // Update form with returned values
            document.getElementById('clientId').value = data.settings.clientId || '';
            document.getElementById('clientSecret').value = data.settings.clientSecret || '';
            document.getElementById('redirectUri').value = data.settings.redirectUri || '';
            document.getElementById('authUrl').value = data.settings.authUrl || '';
            document.getElementById('tokenUrl').value = data.settings.tokenUrl || '';
            document.getElementById('meUrl').value = data.settings.meUrl || '';
            
            // Update configuration status
            const configStatus = document.getElementById('config-status');
            if (data.isValid) {
              configStatus.innerHTML = '<div class="alert alert-success">✅ Configuration is valid and complete.</div>';
            } else {
              configStatus.innerHTML = '<div class="alert alert-warning">⚠️ Configuration is incomplete. Please provide all required fields.</div>';
            }
          } else {
            showAlert('danger', 'Error: ' + (data.error || 'Failed to save settings'));
          }
        } catch (error) {
          console.error('Settings save error:', error);
          showAlert('danger', 'An error occurred while saving settings.');
        }
      });
      
      // Reset settings to defaults
      document.getElementById('reset-settings-btn')?.addEventListener('click', async function() {
        if (confirm('Are you sure you want to reset all settings to defaults?')) {
          try {
            const response = await fetch('/admin/settings/didit/reset', {
              method: 'POST',
              credentials: 'same-origin'
            });
            
            if (response.ok) {
              const data = await response.json();
              showAlert('success', 'Settings reset to defaults');
              
              // Update form with returned values
              document.getElementById('clientId').value = data.settings.clientId || '';
              document.getElementById('clientSecret').value = data.settings.clientSecret || '';
              document.getElementById('redirectUri').value = data.settings.redirectUri || '';
              document.getElementById('authUrl').value = data.settings.authUrl || '';
              document.getElementById('tokenUrl').value = data.settings.tokenUrl || '';
              document.getElementById('meUrl').value = data.settings.meUrl || '';
              
              // Update configuration status
              const configStatus = document.getElementById('config-status');
              if (data.isValid) {
                configStatus.innerHTML = '<div class="alert alert-success">✅ Configuration is valid and complete.</div>';
              } else {
                configStatus.innerHTML = '<div class="alert alert-warning">⚠️ Configuration is incomplete. Please provide all required fields.</div>';
              }
            } else {
              const data = await response.json();
              showAlert('danger', 'Error: ' + (data.error || 'Failed to reset settings'));
            }
          } catch (error) {
            console.error('Settings reset error:', error);
            showAlert('danger', 'An error occurred while resetting settings.');
          }
        }
      });
      
      // Get all users
      async function getUsers() {
        try {
          const response = await fetch('/api/admin/users', {
            credentials: 'same-origin'
          });
          
          if (response.ok) {
            const users = await response.json();
            
            const tableBody = document.getElementById('users-table-body');
            if (users.length === 0) {
              tableBody.innerHTML = '<tr><td colspan="5" class="text-center">No users found</td></tr>';
              return;
            }
            
            tableBody.innerHTML = users.map(user => {
              const verificationStatus = user.verified ? 
                '<span class="badge bg-success">Verified</span>' : 
                '<span class="badge bg-warning text-dark">Pending</span>';
              
              const verifiedOn = user.verificationDetails?.verified_at ? 
                new Date(user.verificationDetails.verified_at).toLocaleString() : 
                'N/A';
              
              return \`
                <tr>
                  <td>\${user.email || 'N/A'}</td>
                  <td>\${user.name || 'N/A'}</td>
                  <td>\${verificationStatus}</td>
                  <td>\${verifiedOn}</td>
                  <td>
                    <button class="btn btn-sm btn-outline-primary" onclick="viewUserDetails('\${user.id}')">View Details</button>
                  </td>
                </tr>
              \`;
            }).join('');
          } else {
            const data = await response.json();
            const tableBody = document.getElementById('users-table-body');
            tableBody.innerHTML = \`<tr><td colspan="5" class="text-center text-danger">Error: \${data.error || 'Failed to load users'}</td></tr>\`;
          }
        } catch (error) {
          console.error('Users fetch error:', error);
          const tableBody = document.getElementById('users-table-body');
          tableBody.innerHTML = '<tr><td colspan="5" class="text-center text-danger">An error occurred while fetching users</td></tr>';
        }
      }
      
      // View user details - Placeholder function
      function viewUserDetails(userId) {
        alert('User details functionality would be implemented here for user ID: ' + userId);
      }
      
      // Utility function to show alerts
      function showAlert(type, message) {
        const alertElement = document.getElementById('settings-alert');
        alertElement.className = \`alert alert-\${type}\`;
        alertElement.textContent = message;
        alertElement.classList.remove('d-none');
        
        // Automatically hide after 5 seconds
        setTimeout(() => {
          alertElement.classList.add('d-none');
        }, 5000);
      }
      
      // Initialize page if admin is logged in
      if (${isAdmin}) {
        // Load settings and users data
        getDiditSettings();
        getUsers();
      }
    </script>
  `
}) %>